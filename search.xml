<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据挖掘与机器学习第九讲--神经网络</title>
      <link href="/2021/10/28/shu-ju-wa-jue-yu-ji-qi-xue-xi-shen-jing-wang-luo/"/>
      <url>/2021/10/28/shu-ju-wa-jue-yu-ji-qi-xue-xi-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<h1 id="第九讲-神经网络"><a href="#第九讲-神经网络" class="headerlink" title="第九讲 神经网络"></a>第九讲 神经网络</h1><h2 id="神经元模型"><a href="#神经元模型" class="headerlink" title="神经元模型"></a>神经元模型</h2><p><strong>神经网络的定义</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281610523.png" style="zoom:80%;"><p><strong>M-P神经元模型</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281613704.png" style="zoom:67%;"><p><strong>典型的激活函数</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281614001.png" style="zoom:80%;"><blockquote><p><strong>理想激活函数是阶跃函数</strong>, 0表示抑制神经元而1表示激活神经元<br>阶跃函数具有<strong>不连续、不光滑</strong>等不好的性质, <strong>常用的是 Sigmoid 函数</strong></p></blockquote><h2 id="感知机与多层网络"><a href="#感知机与多层网络" class="headerlink" title="感知机与多层网络"></a>感知机与多层网络</h2><p><strong>感知机</strong></p><blockquote><p>感知机由两层神经元组成, 输入层接受外界输入信号传递给输出层, 输出层是M-P神经元（激活函数为阶跃函数时亦称阈值逻辑单元）<br>感知机能够容易地<strong>实现逻辑与、或、非运算</strong></p></blockquote><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281618264.png" style="zoom:80%;"><p><strong>感知机学习</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281622279.png" style="zoom:80%;"><p><strong>感知机求解与、或、非问题</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281624940.png" style="zoom:80%;"><blockquote><h6 id="若两类模式线性可分-则感知机的学习过程一定会收敛；否则感知机的学习过程将会发生震荡"><a href="#若两类模式线性可分-则感知机的学习过程一定会收敛；否则感知机的学习过程将会发生震荡" class="headerlink" title="若两类模式线性可分, 则感知机的学习过程一定会收敛；否则感知机的学习过程将会发生震荡"></a>若两类模式线性可分, 则感知机的学习过程一定会收敛；否则感知机的学习过程将会发生震荡</h6><p>单层感知机的学习能力非常有限, 只能解决线性可分问题</p></blockquote><p><strong>多层感知机</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281626296.png" style="zoom:80%;"><blockquote><p>输出层与输入层之间的一层神经元, 被称之为<strong>隐层或隐含层</strong>, 隐含层和输 出层神经元都是具有激活函数的功能神经元</p></blockquote><p><strong>多层前馈网络</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281628929.png" style="zoom:80%;"><h2 id="误差逆传播算法"><a href="#误差逆传播算法" class="headerlink" title="误差逆传播算法"></a>误差逆传播算法</h2><p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281630530.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281632004.png" style="zoom:80%;"></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281639390.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281640771.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281642773.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281643840.png" style="zoom:80%;"><blockquote><p><strong>伪代码描述</strong></p></blockquote><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281645040.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281647167.png" style="zoom:80%;"><p><strong>多层前馈网络表示能力</strong></p><blockquote><p>只需要一个包含足够多神经元的隐层, 多层前馈神经网络就能以任意精度逼近任 意复杂度的连续函数<br>[Hornik et al. ,  1989]</p></blockquote><p><strong>多层前馈网络局限</strong></p><blockquote><p>如何设置<strong>隐层神经元的个数</strong>仍然是个<strong>未决问题</strong>. 实际应用中通常使<strong>用“试错 法”调整</strong><br>神经网络由于强大的表示能力, <strong>经常遭遇过拟合</strong>. 表现为：训练误差持续降低, 但测试误差却可能上升</p></blockquote><p><strong>缓解过拟合的策略</strong></p><blockquote><p><strong>早停</strong>：在训练过程中, 若训练误差降低, 但验证误差升高, 则停止训练<br><strong>正则化</strong>：在误差目标函数中增加一项描述网络复杂程度的部分, 例如连接权 值与阈值的平方和</p></blockquote><h2 id="全局最小与局部最小"><a href="#全局最小与局部最小" class="headerlink" title="全局最小与局部最小"></a>全局最小与局部最小</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281651176.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281652261.png" style="zoom:80%;"><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p><strong>深度学习模型</strong></p><blockquote><p>典型的深度学习模型就是很<strong>深层的神经网络</strong>. </p></blockquote><p><strong>模型复杂度</strong></p><blockquote><p>增加隐层<strong>神经元的数目 (模型宽度)</strong><br>增加<strong>隐层数目（模型深度）</strong><br>从增加模型复杂度的角度看, <strong>增加隐层的数目比增加隐层神经元的数目更有效. 这是因为增加隐层数不仅增加了拥有激活函数的神经元数目, 还增加了激活函数嵌套的层数.</strong></p></blockquote><p><strong>复杂模型难点</strong></p><blockquote><p>多隐层网络难以直接用经典算法（例如标准BP算法）进行训练, 因为误差在 多隐层内逆传播时, 往往会”发散”而不能收敛到稳定状态.</p></blockquote><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281656252.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281657087.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202110281657447.png" style="zoom:80%;">]]></content>
      
      
      <categories>
          
          <category> 数据挖掘与机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoteBook </tag>
            
            <tag> 数据挖掘与机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理第6章	LR分析</title>
      <link href="/2021/10/18/bian-yi-yuan-li-di-6-zhang-lr-fen-xi/"/>
      <url>/2021/10/18/bian-yi-yuan-li-di-6-zhang-lr-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="第6章-LR分析"><a href="#第6章-LR分析" class="headerlink" title="第6章    LR分析"></a>第6章    LR分析</h1><h2 id="6-1自上而下分析及其LR分析概述"><a href="#6-1自上而下分析及其LR分析概述" class="headerlink" title="6.1自上而下分析及其LR分析概述"></a>6.1自上而下分析及其LR分析概述</h2><p>自上而下分析算法：能力强、构造复杂</p><p><strong>移进–归约</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181604032.png" style="zoom:67%;"><p><strong>活前缀是规范句型的前缀，但不包括句柄</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181607716.png" style="zoom: 67%;"><blockquote><p>规范推导：最右推导</p><p>规范句型</p><p>规范归约</p></blockquote><h3 id="LR分析"><a href="#LR分析" class="headerlink" title="LR分析"></a>LR分析</h3><blockquote><p>L：自左向右</p><p>R：最右推导</p></blockquote><p><strong>LR分析器模型</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181611963.png" style="zoom:67%;"><blockquote><p>ACTION：归约or移进</p><p>GOTO：归约后到达的状态</p></blockquote><p><strong>注意：归约后使用伪栈顶</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181616082.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181616833.png" style="zoom:67%;">]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoteBook </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统第三章	同步、通信与死锁</title>
      <link href="/2021/10/18/cao-zuo-xi-tong-di-san-zhang-tong-bu-tong-xin-yu-si-suo/"/>
      <url>/2021/10/18/cao-zuo-xi-tong-di-san-zhang-tong-bu-tong-xin-yu-si-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="3-6死锁"><a href="#3-6死锁" class="headerlink" title="3.6死锁"></a>3.6死锁</h2><h3 id="3-6-1死锁产生"><a href="#3-6-1死锁产生" class="headerlink" title="3.6.1死锁产生"></a>3.6.1死锁产生</h3><blockquote><p><strong>进程推进顺序不当产生死锁</strong></p></blockquote><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181636221.png" style="zoom: 67%;"><blockquote><p><strong>PV操作不当产生死锁</strong>    P：通过    V：释放</p></blockquote><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181637338.png" style="zoom:67%;"><blockquote><p> <strong>资源分配不当引起死锁</strong></p></blockquote><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181642804.png" style="zoom:67%;"><blockquote><p><strong>对临时资源使用不加限制引起死锁</strong></p></blockquote><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181643943.png" style="zoom:67%;"><p><strong>死锁的定义：</strong>一个进程集合中的每个进程都在等待只能由集合中的其他的一个进程才能引发的事件，则称一组进程或系统此时发生了死锁</p><p>==无外力作用，无法向前推进那个==</p><p><strong>死锁产生的因素</strong></p><ol><li>与系统拥有的资源数量有关</li><li>与系统分配策略有关</li><li>已进程对资源的使用要求以及并发进程的推进顺序有关</li></ol><p><strong>处理死锁的基本方法</strong>：预防死锁、避免死锁、检测死锁、解除死锁</p><h3 id="3-6-2死锁防止"><a href="#3-6-2死锁防止" class="headerlink" title="3.6.2死锁防止"></a>3.6.2死锁防止</h3><p><strong>产生死锁的必要条件</strong></p><blockquote><p>if 死锁 then …</p></blockquote><p><strong>互斥条件：</strong>进程互斥使用资源</p><p><strong>占有和等待条件(部分分配条件)：</strong>申请新资源时不释放已占有的资源</p><p><strong>不剥夺条件：</strong>一个进程不能抢夺其他进程占有的资源</p><p><strong>循环等待条件(环路条件)：</strong>存在一组进程循环等待资源的现象</p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181851680.png" style="zoom:80%;"><p><strong>静态分配策略</strong></p><blockquote><p><strong>一个进程必须在执行前就申请他所需要的全部资源，并且直到它所需要的资源都得到满足后才开始执行</strong></p><p><strong>降低了资源利用率</strong></p><p>有些资源在较后的时间才使用，可能造成一个进程占有了一些几乎不用的资源而使得其它进程等待</p></blockquote><p><strong>层次分配策略</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181858548.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181858472.png" style="zoom:67%;"><p><strong>层次分配策略的缺点</strong></p><blockquote><p><strong>限制了新设备的增加</strong></p><p><strong>进程使用各类资源顺序与系统规定顺序不同是造成资源浪费</strong></p><p><strong>限制用户简单、自主编程</strong></p></blockquote><h3 id="3-6-3死锁避免"><a href="#3-6-3死锁避免" class="headerlink" title="3.6.3死锁避免"></a>3.6.3死锁避免</h3><p><strong>银行家算法</strong></p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181903981.png" style="zoom:67%;"><p><strong>安全状态</strong></p><blockquote><p>系统将按照某种<strong>安全序列</strong>为进程分配资源，直至每个进程都顺利完成</p><p>不存在这样的安全序列，则称系统处于不安全系列</p></blockquote><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181915311.png" style="zoom: 80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202110181916071.png" style="zoom:80%;"><p><strong>算法缺陷</strong></p><blockquote><p><strong>很难在进程运行前知道其所需的资源最大量</strong></p><p><strong>系统的进程必须是无关的，相互之间没有同步要求</strong></p><p><strong>进程的个数和分配的资源数目应该是固定的</strong></p></blockquote><h3 id="3-6-4死锁检测和解除"><a href="#3-6-4死锁检测和解除" class="headerlink" title="3.6.4死锁检测和解除"></a>3.6.4死锁检测和解除</h3>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> NoteBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2021/09/17/cao-zuo-xi-tong/"/>
      <url>/2021/09/17/cao-zuo-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、操作系统概论"><a href="#一、操作系统概论" class="headerlink" title="一、操作系统概论"></a>一、操作系统概论</h1><h2 id="1-1操作系统概述"><a href="#1-1操作系统概述" class="headerlink" title="1.1操作系统概述"></a>1.1操作系统概述</h2><h3 id="1-1-1-操作系统与计算机系统"><a href="#1-1-1-操作系统与计算机系统" class="headerlink" title="1.1.1 操作系统与计算机系统"></a>1.1.1 操作系统与计算机系统</h3><p><strong>计算机系统分为哪四层？从上向下看</strong></p><blockquote><ol><li>应用程序层：<strong>解决用户不同的应用问题</strong></li><li>支撑软件层：<strong>建立在操作系统改造和扩充过的机器上</strong>，提供扩展指令集，实现各种语言处理程序、数据库管理系统和其他系统程序。</li><li>系统软件层：<strong>最靠近硬件的一层软件</strong></li><li>计算机硬件层：<strong>操作系统赖以工作的基础</strong>，也是操作系统设计者可以使用的功能和资源</li></ol></blockquote><p><strong>系统软件与支撑、应用软件的区别？</strong></p><blockquote><p>应用软件：基于用户需求编写、安装的专用程序</p><p>支撑软件：实用程序、语言处理程序、数据库管理系统</p><p>系统软件：操作系统</p><p>操作系统与支撑、应用软件层次的区别：1、操作系统有权分配物理硬件资源。2、其它上层软件只能通过操作系统来使用资源</p><p>操作系统用于隔离硬件与其它上层软件</p></blockquote><p><strong>冯·诺伊曼体系结构包括哪几个部分？</strong></p><blockquote></blockquote><p><strong>操作系统的主要任务？分为几大任务？</strong></p><blockquote><img src="https://gitee.com/cpicture/picture-1/raw/master/202109171948621.png" style="zoom:67%;"></blockquote><h3 id="1-1-2-操作系统的资源管理技术"><a href="#1-1-2-操作系统的资源管理技术" class="headerlink" title="1.1.2 操作系统的资源管理技术"></a>1.1.2 操作系统的资源管理技术</h3><p><strong>操作系统资源管理的主要技术包括？</strong></p><blockquote><p><strong>复用：</strong>多个进程共享有限的物理资源</p><p><strong>虚拟：</strong>把一个物理资源变成多个逻辑对应物</p><p><strong>抽象：</strong>屏蔽资源复杂性，提高资源易用性</p></blockquote><p><strong>资源复用分为哪两种？试举例说明</strong></p><blockquote><ul><li>空分复用：资源可以从空间上分割成更小的单元进行使用(内存/硬盘被划分成不同的单元/区域)</li><li>时分复用：•从时间上进行分割，形成时间片，确保在单一时间片内，进程对资源是独占的；中断、抢占、调度算法</li></ul></blockquote><p><strong>多道程序设计：</strong>多个进程共享硬件的技术</p><p><strong>什么是虚拟化?试举例说明</strong></p><blockquote><p>对资源进行转化、模拟或整合,把一个物理资源转变为逻辑上的多个对应物</p></blockquote><p><strong>什么是抽象？试举例说明</strong></p><blockquote><p>虚拟和复用比较：</p><ol><li>复用分割实际存在的物理资源，解决有限资源利用不充分的问题</li><li>虚拟创建假想的逻辑同类资源，解决有限资源不足的问题</li></ol></blockquote><p><strong>试列举说明组合使用资源管理的例子？</strong></p><blockquote><p>往往同时实施抽象和虚化技术</p><p>打印机：打印函数和虚拟多个设备|显示器</p></blockquote><h3 id="1-1-3-操作系统定义和作用"><a href="#1-1-3-操作系统定义和作用" class="headerlink" title="1.1.3 操作系统定义和作用"></a>1.1.3 操作系统定义和作用</h3><h3 id="1-1-4-操作系统功能和特性"><a href="#1-1-4-操作系统功能和特性" class="headerlink" title="1.1.4 操作系统功能和特性"></a>1.1.4 操作系统功能和特性</h3><h2 id="1-2操作系统形成与发展"><a href="#1-2操作系统形成与发展" class="headerlink" title="1.2操作系统形成与发展"></a>1.2操作系统形成与发展</h2><h2 id="1-3操作系统基础服务与用户接口"><a href="#1-3操作系统基础服务与用户接口" class="headerlink" title="1.3操作系统基础服务与用户接口"></a>1.3操作系统基础服务与用户接口</h2><h2 id="1-4结构和运行模型"><a href="#1-4结构和运行模型" class="headerlink" title="1.4结构和运行模型"></a>1.4结构和运行模型</h2>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> NoteBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式系统</title>
      <link href="/2021/09/14/qian-ru-shi-xi-tong/"/>
      <url>/2021/09/14/qian-ru-shi-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、嵌入式系统概论"><a href="#一、嵌入式系统概论" class="headerlink" title="一、嵌入式系统概论"></a>一、嵌入式系统概论</h1><h2 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h2><h3 id="1-1-1为什么要学习嵌入式系统"><a href="#1-1-1为什么要学习嵌入式系统" class="headerlink" title="1.1.1为什么要学习嵌入式系统"></a>1.1.1为什么要学习嵌入式系统</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831084856.png" style="zoom: 80%;"><h3 id="1-1-2什么是嵌入式系统"><a href="#1-1-2什么是嵌入式系统" class="headerlink" title="1.1.2什么是嵌入式系统"></a>1.1.2什么是嵌入式系统</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831085004.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831085021.jpg" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831085031.jpg" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831085042.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831085051.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831085103.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831085112.png" style="zoom:80%;"><h2 id="1-2嵌入式系统的历史"><a href="#1-2嵌入式系统的历史" class="headerlink" title="1.2嵌入式系统的历史"></a>1.2嵌入式系统的历史</h2><p>嵌入式系统并不是一个新的名词，它已存在大约60年的历史。在早期工业控制领域，计算机就已经被嵌入到对象系统实现特定的控制功能了。但由于那时的计算机无论是体积、功耗、运算能力还是价格等都难以满足各种设备特别是小型设备的需求。因此，严格意义上的嵌入式系统应该从微处理器出现开始算起。</p><h3 id="1-2-1嵌入式系统的诞生与发展"><a href="#1-2-1嵌入式系统的诞生与发展" class="headerlink" title="1.2.1嵌入式系统的诞生与发展"></a>1.2.1嵌入式系统的诞生与发展</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831085904.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831090059.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831090205.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831090256.png" style="zoom:80%;"><h3 id="1-2-2嵌入式系统的发展阶段"><a href="#1-2-2嵌入式系统的发展阶段" class="headerlink" title="1.2.2嵌入式系统的发展阶段"></a>1.2.2嵌入式系统的发展阶段</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831092852.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831092929.png" style="zoom:80%;"><h2 id="1-3嵌入式系统的特点"><a href="#1-3嵌入式系统的特点" class="headerlink" title="1.3嵌入式系统的特点"></a>1.3嵌入式系统的特点</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/20210831093117.png" style="zoom:80%;"><h2 id="1-4嵌入式系统的分类"><a href="#1-4嵌入式系统的分类" class="headerlink" title="1.4嵌入式系统的分类"></a>1.4嵌入式系统的分类</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070811476.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070812058.png" style="zoom:80%;"><h2 id="1-5嵌入式系統的组成"><a href="#1-5嵌入式系統的组成" class="headerlink" title="1.5嵌入式系統的组成"></a>1.5嵌入式系統的组成</h2> <img src="https://gitee.com/cpicture/picture-1/raw/master/202109070813204.png" style="zoom:80%;"><h3 id="1-5-1嵌入式系统的硬件组成"><a href="#1-5-1嵌入式系统的硬件组成" class="headerlink" title="1.5.1嵌入式系统的硬件组成"></a>1.5.1嵌入式系统的硬件组成</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070814397.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070815243.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070815642.png" style="zoom:80%;"><h3 id="1-5-2嵌入式系统的软件组成"><a href="#1-5-2嵌入式系统的软件组成" class="headerlink" title="1.5.2嵌入式系统的软件组成"></a>1.5.2嵌入式系统的软件组成</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070817130.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070823978.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070823644.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070823632.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070824301.png" style="zoom:80%;"><h3 id="1-5-3嵌入式系统组成举例"><a href="#1-5-3嵌入式系统组成举例" class="headerlink" title="1.5.3嵌入式系统组成举例"></a>1.5.3嵌入式系统组成举例</h3><h2 id="1-6无处不在的嵌入式系统的应用"><a href="#1-6无处不在的嵌入式系统的应用" class="headerlink" title="1.6无处不在的嵌入式系统的应用"></a>1.6无处不在的嵌入式系统的应用</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070836693.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070837558.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070837131.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070837351.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070837368.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070838194.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070838071.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070839742.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070839297.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070839678.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070839694.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070840368.png" style="zoom:80%;"><h2 id="1-7嵌入式系统法人技术现状和发展趋势"><a href="#1-7嵌入式系统法人技术现状和发展趋势" class="headerlink" title="1.7嵌入式系统法人技术现状和发展趋势"></a>1.7嵌入式系统法人技术现状和发展趋势</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070829141.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070830377.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070830448.png" style="zoom:80%;"><h2 id="1-8嵌入式系统的主干学科与相关技术"><a href="#1-8嵌入式系统的主干学科与相关技术" class="headerlink" title="1.8嵌入式系统的主干学科与相关技术"></a>1.8嵌入式系统的主干学科与相关技术</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070836750.png" style="zoom:80%;"><h1 id="二、嵌入式微处理器技术"><a href="#二、嵌入式微处理器技术" class="headerlink" title="二、嵌入式微处理器技术"></a>二、嵌入式微处理器技术</h1><h2 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h2><p>嵌入式微处理器是嵌入式系统的核心部件，深入了解和掌握嵌入式微处理器的相关技术是从事嵌入式系统分析、设计和应用的必然要求。本章主要介绍嵌入式微处理器的基本分类和典型技术，并对应用广泛的ARM嵌入式微处理器的历史作一简要梳理，后续章节会更多的讲解ARM处理器的概念、技术和新进展。</p><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070831877.png" style="zoom:80%;"><h2 id="2-2嵌入式处理器的基本分类"><a href="#2-2嵌入式处理器的基本分类" class="headerlink" title="2.2嵌入式处理器的基本分类"></a>2.2嵌入式处理器的基本分类</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070833171.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100832259.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070834488.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070834141.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070834797.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070835801.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070835545.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070835348.png" style="zoom:80%;"><h2 id="2-3嵌入式微处理器的典型技术"><a href="#2-3嵌入式微处理器的典型技术" class="headerlink" title="2.3嵌入式微处理器的典型技术"></a>2.3嵌入式微处理器的典型技术</h2><p> 嵌入式微处理器具有功能专用、低功耗和低成本的特点，这源于它采用了一些通用处理器中没有或不明显的技术解决方案，这些嵌入式微处理器的典型技术包括：</p><p>1）I/O端口统一编址与特殊功能寄存器；</p><p>2）哈佛架构；</p><p>3）桶型移位器；</p><p>4）正交指令集；</p><p>5）双密度指令集；</p><p>6）看门狗定时器；</p><p>7）边界对准与端序；</p><p>8）地址重映射；</p><p>9）FIFO缓冲寄存器；</p><p>10）主存控制器。</p><h3 id="2-3-1-I-O统一编址与特殊功能寄存器"><a href="#2-3-1-I-O统一编址与特殊功能寄存器" class="headerlink" title="2.3.1 I/O统一编址与特殊功能寄存器"></a>2.3.1 I/O统一编址与特殊功能寄存器</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070931822.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070932235.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109070932991.png" style="zoom:80%;"><h3 id="2-3-2冯-诺依曼结构与哈佛结构"><a href="#2-3-2冯-诺依曼结构与哈佛结构" class="headerlink" title="2.3.2冯.诺依曼结构与哈佛结构"></a>2.3.2冯.诺依曼结构与哈佛结构</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100818467.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100818381.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100826064.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100826097.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100827315.png" style="zoom:80%;"><h3 id="2-3-3桶型移位器"><a href="#2-3-3桶型移位器" class="headerlink" title="2.3.3桶型移位器"></a>2.3.3桶型移位器</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100820162.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100820703.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100821730.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100821579.png" style="zoom:80%;"><h3 id="2-3-4正交指令集"><a href="#2-3-4正交指令集" class="headerlink" title="2.3.4正交指令集"></a>2.3.4正交指令集</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100822495.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100822939.png" style="zoom:80%;"><h3 id="2-3-5双密度指令集"><a href="#2-3-5双密度指令集" class="headerlink" title="2.3.5双密度指令集"></a>2.3.5双密度指令集</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100823456.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100824604.png" style="zoom:80%;"><h3 id="2-3-6看门狗定时器"><a href="#2-3-6看门狗定时器" class="headerlink" title="2.3.6看门狗定时器"></a>2.3.6看门狗定时器</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100907188.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100907109.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100907487.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100907948.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100908551.png" style="zoom:80%;"><h3 id="2-3-7边界对准与端序"><a href="#2-3-7边界对准与端序" class="headerlink" title="2.3.7边界对准与端序"></a>2.3.7边界对准与端序</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100908823.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109100909196.png" style="zoom:80%;"><h3 id="2-3-8地址重映射"><a href="#2-3-8地址重映射" class="headerlink" title="2.3.8地址重映射"></a>2.3.8地址重映射</h3><ul><li><strong>地址重映射一节要掌握嵌入式系统的启动流程。</strong></li><li><strong>以及为何/如何进行地址重映射</strong></li></ul><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140802790.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140802583.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140803221.png" style="zoom:80%;"><h3 id="2-3-9FIFO缓冲寄存器"><a href="#2-3-9FIFO缓冲寄存器" class="headerlink" title="2.3.9FIFO缓冲寄存器"></a>2.3.9FIFO缓冲寄存器</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140815503.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140815578.png" style="zoom:80%;"><h3 id="2-3-10主存储器"><a href="#2-3-10主存储器" class="headerlink" title="2.3.10主存储器"></a>2.3.10主存储器</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140856109.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140856434.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140857240.png" style="zoom:80%;"><h2 id="2-4主流嵌入式微处理器"><a href="#2-4主流嵌入式微处理器" class="headerlink" title="2.4主流嵌入式微处理器"></a>2.4主流嵌入式微处理器</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140858913.png" style="zoom:80%;"><p>几种常见嵌入式处理器:</p><ul><li>ARM</li><li>PowerPC</li><li>MIPS</li></ul><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140859531.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140859716.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140859826.png" style="zoom:80%;"><h1 id="三、ARM处理器体系结构"><a href="#三、ARM处理器体系结构" class="headerlink" title="三、ARM处理器体系结构"></a>三、ARM处理器体系结构</h1><h2 id="3-1ARM处理器体系结构概述"><a href="#3-1ARM处理器体系结构概述" class="headerlink" title="3.1ARM处理器体系结构概述"></a>3.1ARM处理器体系结构概述</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140903663.png" style="zoom:80%;"><h3 id="3-1-1ARM体系结构版本"><a href="#3-1-1ARM体系结构版本" class="headerlink" title="3.1.1ARM体系结构版本"></a>3.1.1ARM体系结构版本</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140904070.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140905840.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140905409.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140905991.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140906529.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140906796.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140907926.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140907487.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140907804.png" style="zoom:80%;"><h4 id="3-1-1-1相关知识点概述"><a href="#3-1-1-1相关知识点概述" class="headerlink" title="3.1.1.1相关知识点概述"></a>3.1.1.1相关知识点概述</h4><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140911163.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140911135.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140912467.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140912042.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140912729.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140912293.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140913636.png" style="zoom:80%;"><h3 id="3-1-2ARM体系结构版本的变种"><a href="#3-1-2ARM体系结构版本的变种" class="headerlink" title="3.1.2ARM体系结构版本的变种"></a>3.1.2ARM体系结构版本的变种</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140909494.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140910983.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140910042.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109140910145.png" style="zoom:80%;"><h3 id="3-1-3ARM处理器核的命名规则"><a href="#3-1-3ARM处理器核的命名规则" class="headerlink" title="3.1.3ARM处理器核的命名规则"></a>3.1.3ARM处理器核的命名规则</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170806952.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170807322.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170808576.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170808941.png" style="zoom:80%;"><h3 id="3-1-4处理器核系列举例"><a href="#3-1-4处理器核系列举例" class="headerlink" title="3.1.4处理器核系列举例"></a>3.1.4处理器核系列举例</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170810702.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170810612.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170810552.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170811398.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170811931.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170812940.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170812190.png" style="zoom: 80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170813899.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170813034.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170814757.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170814719.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170815648.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170815640.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170816800.png" style="zoom: 67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170816037.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170817390.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170817803.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170817523.png" style="zoom: 80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170818250.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170818631.png" style="zoom:80%;"><h2 id="3-2ARM处理器的架构"><a href="#3-2ARM处理器的架构" class="headerlink" title="3.2ARM处理器的架构"></a>3.2ARM处理器的架构</h2><p>ARM7TDMI核是ARM处理器核中的经典，其它核都很大程度上继承了ARM7TDMI核的硬件结构和指令集，深入了解ARM7TDMI有助于理解其它处理器核。本节就以ARM7TDMI为主要例子，介绍ARM处理器的内部结构，包括其基本特征、流水线结构、寄存器结构等。</p><h3 id="3-2-1ARM处理器的架构的RISC特征"><a href="#3-2-1ARM处理器的架构的RISC特征" class="headerlink" title="3.2.1ARM处理器的架构的RISC特征"></a>3.2.1ARM处理器的架构的RISC特征</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170926797.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170926409.png" style="zoom:80%;"><h3 id="3-2-2ARM处理器的指令流水线"><a href="#3-2-2ARM处理器的指令流水线" class="headerlink" title="3.2.2ARM处理器的指令流水线"></a>3.2.2ARM处理器的指令流水线</h3><blockquote><p><strong>指令流水要求重点掌握三级流水。</strong></p></blockquote><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170928238.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170928393.png" style="zoom: 80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170929823.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170929453.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170930745.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170930253.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170930682.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170931917.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170931140.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170931499.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170932204.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170932248.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109170932341.png" style="zoom:80%;"><h3 id="3-2-3ARM的工作模式和工作状态"><a href="#3-2-3ARM的工作模式和工作状态" class="headerlink" title="3.2.3ARM的工作模式和工作状态"></a>3.2.3ARM的工作模式和工作状态</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230802990.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230803612.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230803436.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230804088.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230804183.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230805640.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230805783.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230805951.png" style="zoom:80%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230806491.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230806839.png" style="zoom:67%;"><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230806059.png" style="zoom:80%;"><h3 id="3-2-4寄存器的组织"><a href="#3-2-4寄存器的组织" class="headerlink" title="3.2.4寄存器的组织"></a>3.2.4寄存器的组织</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109230807431.jpg" style="zoom: 67%;"><h2 id="3-3ARM处理器的组织"><a href="#3-3ARM处理器的组织" class="headerlink" title="3.3ARM处理器的组织"></a>3.3ARM处理器的组织</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202109240918639.png" style="zoom:80%;"><h3 id="3-3-1ARM存储器的数据类型和存储格式"><a href="#3-3-1ARM存储器的数据类型和存储格式" class="headerlink" title="3.3.1ARM存储器的数据类型和存储格式"></a>3.3.1ARM存储器的数据类型和存储格式</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109240919010.png" style="zoom: 67%;"><h3 id="3-3-2ARM的存储体系"><a href="#3-3-2ARM的存储体系" class="headerlink" title="3.3.2ARM的存储体系"></a>3.3.2ARM的存储体系</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109240922952.png" style="zoom:80%;"><h3 id="3-3-3片内存储器的用法"><a href="#3-3-3片内存储器的用法" class="headerlink" title="3.3.3片内存储器的用法"></a>3.3.3片内存储器的用法</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109241014478.png" style="zoom: 67%;"><h3 id="3-3-4协处理器CP15"><a href="#3-3-4协处理器CP15" class="headerlink" title="3.3.4协处理器CP15"></a>3.3.4协处理器CP15</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109240937132.png" style="zoom:67%;"><h3 id="3-3-5存储管理单元MMU"><a href="#3-3-5存储管理单元MMU" class="headerlink" title="3.3.5存储管理单元MMU"></a>3.3.5存储管理单元MMU</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109241015452.png" style="zoom:67%;"><h3 id="3-3-6存储保护单元"><a href="#3-3-6存储保护单元" class="headerlink" title="3.3.6存储保护单元"></a>3.3.6存储保护单元</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109280852528.png" style="zoom:67%;"><h3 id="3-3-7ARM处理器的Cache"><a href="#3-3-7ARM处理器的Cache" class="headerlink" title="3.3.7ARM处理器的Cache"></a>3.3.7ARM处理器的Cache</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109280854365.png" style="zoom:67%;"><h3 id="3-3-8快速上下文切换扩展"><a href="#3-3-8快速上下文切换扩展" class="headerlink" title="3.3.8快速上下文切换扩展"></a>3.3.8快速上下文切换扩展</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109280854732.png" style="zoom:67%;"><h3 id="3-3-9写缓存器-Write-Buffer"><a href="#3-3-9写缓存器-Write-Buffer" class="headerlink" title="3.3.9写缓存器(Write Buffer)"></a>3.3.9写缓存器(Write Buffer)</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109280855047.png" style="zoom:67%;"><h2 id="3-4ARM的异常中断处理"><a href="#3-4ARM的异常中断处理" class="headerlink" title="3.4ARM的异常中断处理"></a>3.4ARM的异常中断处理</h2><blockquote><p>理解从异常中断处理程序返回关键在弄清对每一种异常发生时，在三级流水线的情况下，程序计数器PC指向的位置。</p></blockquote><img src="https://gitee.com/cpicture/picture-1/raw/master/202109280856445.png" style="zoom:67%;"><h3 id="3-4-1ARM的异常中断响应"><a href="#3-4-1ARM的异常中断响应" class="headerlink" title="3.4.1ARM的异常中断响应"></a>3.4.1ARM的异常中断响应</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109280857131.png" style="zoom:67%;"><h3 id="3-4-2从异常中断处理程序返回"><a href="#3-4-2从异常中断处理程序返回" class="headerlink" title="3.4.2从异常中断处理程序返回"></a>3.4.2从异常中断处理程序返回</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202109280859642.jpg" style="zoom:67%;"><h1 id="四、嵌入式系统调节技术"><a href="#四、嵌入式系统调节技术" class="headerlink" title="四、嵌入式系统调节技术"></a>四、嵌入式系统调节技术</h1><h2 id="4-1嵌入式硬件调试结构和调试技术"><a href="#4-1嵌入式硬件调试结构和调试技术" class="headerlink" title="4.1嵌入式硬件调试结构和调试技术"></a>4.1嵌入式硬件调试结构和调试技术</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202110080833911.png" style="zoom: 80%;"><h3 id="4-1-1与通用计算机调试结构的比较"><a href="#4-1-1与通用计算机调试结构的比较" class="headerlink" title="4.1.1与通用计算机调试结构的比较"></a>4.1.1与通用计算机调试结构的比较</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202110080834654.png" style="zoom:80%;"><h3 id="4-1-2ROM仿真器"><a href="#4-1-2ROM仿真器" class="headerlink" title="4.1.2ROM仿真器"></a>4.1.2ROM仿真器</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202110080851886.png" style="zoom:80%;"><h3 id="4-1-3实时在线仿真"><a href="#4-1-3实时在线仿真" class="headerlink" title="4.1.3实时在线仿真"></a>4.1.3实时在线仿真</h3><p><img src="https://gitee.com/cpicture/picture-1/raw/master/202110080840411.png"></p><h2 id="4-2指令集模拟器"><a href="#4-2指令集模拟器" class="headerlink" title="4.2指令集模拟器"></a>4.2指令集模拟器</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202110080850330.png" style="zoom:80%;"><h2 id="4-3片上调试技术"><a href="#4-3片上调试技术" class="headerlink" title="4.3片上调试技术"></a>4.3片上调试技术</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202110090859791.png" style="zoom:80%;"><h3 id="4-3-1背景调试模式"><a href="#4-3-1背景调试模式" class="headerlink" title="4.3.1背景调试模式"></a>4.3.1背景调试模式</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202110090901354.png" style="zoom:80%;"><h3 id="4-3-2边界扫描测试技术和JTAG接口"><a href="#4-3-2边界扫描测试技术和JTAG接口" class="headerlink" title="4.3.2边界扫描测试技术和JTAG接口"></a>4.3.2边界扫描测试技术和JTAG接口</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202110090920557.jpg" style="zoom:80%;"><h3 id="4-3-3嵌入式ICE-RT模块"><a href="#4-3-3嵌入式ICE-RT模块" class="headerlink" title="4.3.3嵌入式ICE-RT模块"></a>4.3.3嵌入式ICE-RT模块</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202110090924907.jpg" style="zoom:80%;"><h3 id="4-3-4JTAG的断点设置原理"><a href="#4-3-4JTAG的断点设置原理" class="headerlink" title="4.3.4JTAG的断点设置原理"></a>4.3.4JTAG的断点设置原理</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202110090925260.png" style="zoom:80%;"><h3 id="4-3-5Nexus调试标准"><a href="#4-3-5Nexus调试标准" class="headerlink" title="4.3.5Nexus调试标准"></a>4.3.5Nexus调试标准</h3><img src="https://gitee.com/cpicture/picture-1/raw/master/202110090926320.png" style="zoom:80%;"><h2 id="4-4嵌入追踪宏单元ETM"><a href="#4-4嵌入追踪宏单元ETM" class="headerlink" title="4.4嵌入追踪宏单元ETM"></a>4.4嵌入追踪宏单元ETM</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202110090927856.png" style="zoom:80%;"><h2 id="4-5基于Angel的调试方案"><a href="#4-5基于Angel的调试方案" class="headerlink" title="4.5基于Angel的调试方案"></a>4.5基于Angel的调试方案</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202110090928685.png" style="zoom:80%;"><h2 id="4-6半主机调试方式"><a href="#4-6半主机调试方式" class="headerlink" title="4.6半主机调试方式"></a>4.6半主机调试方式</h2><img src="https://gitee.com/cpicture/picture-1/raw/master/202110090928485.png" style="zoom:80%;">]]></content>
      
      
      <categories>
          
          <category> 嵌入式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoteBook </tag>
            
            <tag> 嵌入式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2021/09/02/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2021/09/02/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因为西装裤(C装酷)</span></span></p><p>门里站着一个人? <span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click  </button><span class="hide-content">闪</span></span></p><div class="mermaid">pie    title Key elements in Product X    "Calcium" : 42.96    "Potassium" : 50.05    "Magnesium" : 10.01    "Iron" :  5</div>]]></content>
      
      
      <categories>
          
          <category> 我的第一篇博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/30/hello-world/"/>
      <url>/2021/08/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
