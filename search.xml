<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2021/09/02/test/"/>
      <url>/2021/09/02/test/</url>
      
        <content type="html"><![CDATA[<h1 id="蚁群算法求解TSP问题"><a href="#蚁群算法求解TSP问题" class="headerlink" title="蚁群算法求解TSP问题"></a>蚁群算法求解TSP问题</h1><h2 id="求解具体问题前的一些思考"><a href="#求解具体问题前的一些思考" class="headerlink" title="求解具体问题前的一些思考"></a>求解具体问题前的一些思考</h2><p><img src="https://gitee.com/cpicture/picture-1/raw/master/20210606230603.png" alt="求解问题"></p><p><strong>语言选择</strong>：<strong>C</strong></p><p><strong>地图的存储方式</strong>：<strong>关系矩阵</strong></p><p>就目前所学，C语言中表示一幅如图所示的图像有<strong>关系矩阵</strong>、<strong>链表</strong>两种方式。</p><p>与关系矩阵相比，链表方式实现难以直接借鉴，选择关系矩阵方式。</p><p>所给图像不是<strong>完全图</strong>，存在一些不能一步转移的路径，如1-&gt;5。通过将其路径长度设为一个较大的数解决。</p><p><strong>模型选择</strong>：蚁周模型</p><blockquote><p>蚂蚁系统有三种基本模型分别是蚁周模型、蚁密模型、蚁量模型。三种模型的实现大致相同,主要区别是在信息素的更新方式上。</p></blockquote><p><strong>我认为的蚁群算法求解TSP</strong>：课后</p><ul><li>将m只蚂蚁放在同一起点处，每一只蚂蚁途径每一个城市一次仅一次，最终回到起点</li><li>在一次迭代过程中，信息素蚂蚁每走一步，便会更新一次（q/D）</li><li>蚂蚁的下一城市选择是依据实时信息素浓度的</li><li>在迭代过程中，蚂蚁数量不会增加，每一次迭代过程中的蚂蚁还是原来的那些蚂蚁</li><li>最终的最优解是根据信息素浓度给出的</li></ul><p><strong>具体实现</strong>：</p><ul><li>M只蚂蚁随机放置到N个城市中</li><li>进行完一次迭代过程后，进行一次信息素更新</li><li>在第N次迭代过程中，信息素的依据是上一轮迭代的结果，并且，蚂蚁的一生是确定的，迭代刚开始就会规划每一只蚂蚁的路线</li><li>每一轮迭代的最后会将蚂蚁数据free(),</li><li>最终的解：将每一迭代过程中的最优解，与当前最优解进行比较，最终得出的。感觉有点<strong>遗传算法</strong>的味道</li></ul><h2 id="算法的主要步骤"><a href="#算法的主要步骤" class="headerlink" title="算法的主要步骤"></a>算法的主要步骤</h2><p><img src="https://gitee.com/cpicture/picture-1/raw/master/20210607165654.png"></p><h3 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h3><ul><li>关系(地图)矩阵graph，城市数目N，信息素浓度矩阵phe</li><li>信息素因子α，启发函数因子β，信息素浓度保持度rout，信息素常量Q</li><li>蚂蚁数量M，最大迭代次数RcMax,信息素初始浓度IN</li><li>启发函数矩阵(1/d)，信息素增量矩阵∆τ_ij</li><li>二维矩阵map表示每只蚂蚁的路线，二维矩阵via表示每只蚂蚁访问过的城市(禁忌表)</li><li>当前最优解</li></ul><h3 id="迭代过程"><a href="#迭代过程" class="headerlink" title="迭代过程"></a>迭代过程</h3><ul><li><p>将M只蚂蚁随机分配到N个城市</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//y表示当前迭代次数，M蚂蚁数，N城市数</span><span class="token punctuation">{</span>    map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>y<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">%</span>N<span class="token punctuation">;</span><span class="token comment">//蚂蚁路线</span>    vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//访问城市(禁忌表)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>根据信息素浓度，为每一只蚂蚁安排“一生”的路径</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span>城市数    <span class="token keyword">for</span>蚂蚁数    根据禁忌表算出转移概率    轮盘赌方式确定下一步    ·更新蚂蚁下一步路线，更新禁忌表    endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新最优解</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span>该轮迭代最优路径长度<span class="token operator">&lt;</span>当前最优路径长度    更新最优路径和长度end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>更新信息素浓度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">solution</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//每只蚂蚁走过的总路径长度</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">=</span>Q<span class="token operator">/</span><span class="token function">solution</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//∆τ_ij</span><span class="token function">phe</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">phe</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">*</span>rout<span class="token operator">+</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>蚂蚁数据初始化</p><p>初始化蚂蚁路线矩阵矩阵和禁忌表</p></li></ul><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><ul><li><p>将M只蚂蚁随机分配到N个城市中</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//y表示当前迭代次数，M蚂蚁数，N城市数</span><span class="token punctuation">{</span>    map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>y<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">%</span>N<span class="token punctuation">;</span><span class="token comment">//蚂蚁路线</span>    vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//访问城市(禁忌表)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>转移概率计算</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">psum <span class="token operator">+=</span> <span class="token function">pow</span><span class="token punctuation">(</span>phe<span class="token punctuation">[</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>alphe<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>expectVa<span class="token punctuation">[</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>betra<span class="token punctuation">)</span><span class="token comment">//phe信息素浓度，map蚂蚁路线，expectVa启发函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>轮盘赌方式</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> drand <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>RAND_MAX<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(0,1]随机数</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//0表示未访问</span>    <span class="token punctuation">{</span>pro <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>phe<span class="token punctuation">[</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>alphe<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>expectVa<span class="token punctuation">[</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>betra<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>psum<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pro<span class="token operator">&gt;=</span>drand<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>信息素更新</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//完成add矩阵的构建---∆τ_ij</span>add<span class="token punctuation">[</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>Q<span class="token operator">/</span>solu<span class="token punctuation">;</span><span class="token comment">//每只蚂蚁的路线的总距离solu</span><span class="token comment">//完成信息素浓度的更新</span>phe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> phe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>rout <span class="token operator">+</span> add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><strong>M</strong>：9    <strong>迭代</strong>：20     <strong>alphe</strong> = 2    <strong>betra</strong> = 2    <strong>rout</strong> = 0.7    <strong>Q</strong> = 10</p><p><img src="https://gitee.com/cpicture/picture-1/raw/master/20210607215925.png"></p><p><strong>M</strong>：9    <strong>迭代</strong>：20     <strong>alphe</strong> = 0    <strong>betra</strong> = 2    <strong>rout</strong> = 0.7    <strong>Q</strong> = 10  <strong>只根据路径长度</strong></p><p><img src="https://gitee.com/cpicture/picture-1/raw/master/20210607213623.png"></p><p><strong>M</strong>：9    <strong>迭代</strong>：20     <strong>alphe</strong> = 2    <strong>betra</strong> = 0    <strong>rout</strong> = 0.7    <strong>Q</strong> = 10  <strong>只根据信息素浓度</strong></p><p><img src="https://gitee.com/cpicture/picture-1/raw/master/20210607220011.png"></p><p><strong>M</strong>：9    <strong>迭代</strong>：1     <strong>alphe</strong> = 2    <strong>betra</strong> = 3    <strong>rout</strong> = 0.7    <strong>Q</strong> = 10  <strong>只迭代一次，两次就会得到19</strong></p><p><img src="https://gitee.com/cpicture/picture-1/raw/master/20210607214105.png"></p><h3 id="将M个蚂蚁放到同一个起点"><a href="#将M个蚂蚁放到同一个起点" class="headerlink" title="将M个蚂蚁放到同一个起点"></a>将M个蚂蚁放到同一个起点</h3><p><strong>M</strong>：9    <strong>迭代</strong>：180     <strong>alphe</strong> = 2    <strong>betra</strong> = 2    <strong>rout</strong> = 0.7    <strong>Q</strong> = 10 <strong>第一个城市为4</strong></p><p><img src="https://gitee.com/cpicture/picture-1/raw/master/20210607214955.png"></p><p><strong>M</strong>：9    <strong>迭代</strong>：5    <strong>alphe</strong> = 2    <strong>betra</strong> = 2    <strong>rout</strong> = 0.7    <strong>Q</strong> = 10 <strong>第一个城市为4</strong></p><p><img src="https://gitee.com/cpicture/picture-1/raw/master/20210607215136.png"></p><p><strong>M</strong>：9    <strong>迭代</strong>：20    <strong>alphe</strong> = 2    <strong>betra</strong> = 2    <strong>rout</strong> = 0.7    <strong>Q</strong> = 10 <strong>第一个城市为2</strong>   <strong>????</strong></p><p><img src="https://gitee.com/cpicture/picture-1/raw/master/20210607215309.png" alt="疑惑[doge]"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span><span class="token expression"><span class="token keyword">double</span> graph<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></span><span class="token comment">//城市的个数    int M = 9;//每一轮中蚂蚁的个数    int RcMax = 2;//迭代次数    int IN = 1;//信息素的初始量double add[N][N];//每一段的信息素增量数组int map[M][N];//每一只蚂蚁的所走的路线记录int vis[M][N];//记录每一只访问过的城市，0表示未访问，1表示以访问double expectVa[N][N];//启发函数 = 1.0/距离double phe[N][N];//每一段路径上的信息素double MAX = 0x7fffffff;double alphe,betra,rout,Q;//alphe信息素的影响因子，betra路线距离的影响因子，rout信息素的保持度，Q用于计算每只蚂蚁在其路迹留下的信息素增量double bestSolution = MAX;//最短距离int bestWay[N];//最优路线//初始化变量参数和信息数组alphe = 2;betra = 3;rout = 0.7;Q = 10;//初始化城市图  TODOfor(int i = 0;i&lt;N;i++ ){graph[i][i] = 1000;}//初始化路线记录数组for(int i = 0;i&lt;M;i++ ){        for(int j = 0;j&lt;N;j++)        {            map[i][j] = -1;            vis[i][j] = 0;        }}//初始化启发函数for(int i = 0;i&lt;N;i++ ){        for(int j = 0;j&lt;N;j++)        {            expectVa[i][j] = 1.0/graph[i][j];        }}//初始化信息素数组for(int i = 0;i&lt;N;i++ ){        for(int j = 0;j&lt;N;j++)        {            phe[i][j] = IN;        }}//迭代运算for(int y = 0; y&lt;RcMax;y++){        for(int i = 0;i&lt;M;i++)//为每只蚂蚁分配起点        {            map[i][0] = (y+i)%N;            // map[i][0] = 1;            vis[i][ map[i][0]] = 1;        }//完成该轮中每一只蚂蚁的路线选择        int s = 1;        while(s&lt;N)        {            for(int i = 0;i&lt;M;i++)            {                double psum = 0;                for(int j = 0;j&lt;N;j++)                {                    if(vis[i][j]==0)                    {                        psum += pow(phe[map[i][s-1]][j],alphe) * pow(expectVa[map[i][s-1]][j],betra);                    }                }                //srand((unsigned)time(NULL));                double drand = (double)(rand())/(RAND_MAX+1);                double pro = 0;                int j;                for(j = 0;j&lt;N;j++)                {                if(vis[i][j]==0)                {                    pro += (pow(phe[map[i][s-1]][j],alphe) * pow(expectVa[map[i][s-1]][j],betra))/psum;                    if(pro&gt;=drand)                    {                    break;                    }                }                }                vis[i][j] = 1;                map[i][s] = j;            }        s++;        }//保存最优路线        double solution = 0;        for(int i = 0;i&lt;M;i++)        {            solution = 0;            for(int a =0;a&lt;N-1;a++)            {                solution+= graph[map[i][a]][map[i][a+1]];            }            solution+=graph[map[i][0]][map[i][5]];            if(solution&lt;bestSolution)            {                for(int j = 0;j&lt;N;j++)                {                    bestWay[j] = map[i][j];                }                bestSolution = solution;            }        }//计算每一只蚂蚁在其每一段路径上留下的信息素增量//初始化信息素增量数组        for(int i = 0;i&lt;N;i++)        {            for(int j = 0;j&lt;N;j++)            {                add[i][j] = 0;            }        }        for(int i = 0;i&lt;M;i++)        {            //先算出每只蚂蚁的路线的总距离solu            double solu = 0;            for(int a =0;a&lt;N-1;a++)            {                solu += graph[map[i][a]][map[i][a+1]];            }            solu+=graph[map[i][0]][map[i][5]];            int j;            double d = Q/solu;            for( j = 0 ;j&lt;N-1;j++)            {                add[map[i][j]][map[i][j+1]] += d;            } //注意由于每一只蚂蚁的起始点是随机设置的，所以从终点到起点也要有增加信息素            add[map[i][N-1]][map[i][0]] += d;        }//更新信息素        for(int i=0;i&lt;N;i++)        {            for(int j = 0;j&lt;N;j++)            {                phe[i][j] = phe[i][j]*rout + add[i][j];                //为信息素设置一个下限值和上限值                if(phe[i][j]&lt;0.0001)                {                    phe[i][j] = 0.0001;                }                if(phe[i][j]&gt;200)                {                    phe[i][j] = 200;                }            }        }        //恢复路线记录数组        for(int i = 0;i&lt;M;i++ )        {            for(int j = 0;j&lt;N;j++)            {                map[i][j] = -1;                vis[i][j] = 0;            }        }    }//输出最优路线结果   for(int i = 0;i&lt;N;i++ ){    printf("-%d",bestWay[i]+1);}printf("\n");printf("最优路线的总长度是：%f\n",bestSolution);}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2021/08/30/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2021/08/30/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/30/hello-world/"/>
      <url>/2021/08/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
